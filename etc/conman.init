#!/bin/sh
###############################################################################
# $Id$
###############################################################################
# Copyright (C) 2001-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory.
# Written by Chris Dunlap <cdunlap@llnl.gov>.
# UCRL-CODE-2002-009.
###############################################################################
# chkconfig:      345 95 5
###############################################################################
### BEGIN INIT INFO
# Provides:       conman
# Required-Start: $named $network $time
# Required-Stop:  $named $network $time
# Should-Start:   $local_fs $syslog
# Should-Stop:    $local_fs $syslog
# Default-Start:  3 4 5
# Default-Stop:   0 1 2 6
# Description:    Start/Stop the ConMan (serial console manager) daemon.
### END INIT INFO
###############################################################################

unset DESC DAEMON CONFIG OPTIONS PIDFILE NICE USER ENABLE_RELOAD

DESC="ConMan"
DAEMON="/usr/sbin/conmand"
#CONFIG=
#OPTIONS=
#PIDFILE=
#NICE=
#USER=
#ENABLE_RELOAD=

PATH=/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin
DAEMON_NAME="`basename \"$DAEMON\"`"
SERVICE_NAME="`echo $0 | perl -pe 's,(.*/)?(.*?)(\.init)?$,$2,'`"
SIGTERM_TIMEOUT="3"

# Read configuration defaults to override variables:
#   $CONFIG, $OPTIONS, $PIDFILE, $USER, $NICE, $ENABLE_RELOAD
##
for DEFAULTS in "/etc/default/$SERVICE_NAME" "/etc/sysconfig/$SERVICE_NAME"; do
  [ -r "$DEFAULTS" ] && . "$DEFAULTS"
done

# Exit if the package has been removed.
##
[ -x "$DAEMON" ] || exit 5                      # program not installed

# Exit if the configuration has been removed.
##
[ -z "$CONFIG" -o -r "$CONFIG" ] || exit 6      # program not configured

###############################################################################

service_init ()
{
# Determine the system type and initialize the environment.
#
# Note that the shell positional parameters must be preserved when calling
#   this function in order for SuSE to initialize its environment properly.
##
  STATUS=0
  [ -n "$ENABLE_RELOAD" -a "$ENABLE_RELOAD" != 0 ] \
    && RELOAD=1 || unset RELOAD
  expr "$NICE" : '[0-9]*$' >/dev/null 2>&1 && NICE="+$NICE"
  [ -n "$USER" -a "`id -u 2>/dev/null`" -ne 0 ] && unset USER

  if [ -f /etc/debian_version -a -x /sbin/start-stop-daemon ]; then
    SYSTEM="DEBIAN"
  elif [ -f /etc/redhat-release -a -r /etc/init.d/functions ]; then
    SYSTEM="REDHAT"
    . /etc/init.d/functions
    RH_SUBSYS_BASENAME="`echo $0 | perl -pe 's,(.*/)?([SK][0-9]{2})?(.*),$3,'`"
    RH_SUBSYS="/var/lock/subsys/$RH_SUBSYS_BASENAME"
    INITLOG_ARGS=""                     # disable RH suppression of stderr msgs
  elif [ -f /etc/SuSE-release -a -r /etc/rc.status ]; then
    SYSTEM="SUSE"
    . /etc/rc.status
    rc_reset
  elif [ -r /lib/lsb/init-functions ]; then
    SYSTEM="LSB"
    . /lib/lsb/init-functions
  else
    SYSTEM="OTHER"
  fi
}

###############################################################################

service_fini ()
{
# Return the exit status.
##
  case $SYSTEM in
    SUSE)
      rc_exit
      ;;
    DEBIAN|REDHAT|LSB|*)
      exit $STATUS
      ;;
  esac
}

###############################################################################

service_start ()
{
# Start the service.
# Required by LSB.
#
# According to LSB, running "start" on a service already running should be
#   considered successful.
##
  printf "Starting $DESC: "
  case $SYSTEM in
    DEBIAN)
      printf "$DAEMON_NAME"
      start-stop-daemon --start --quiet \
        ${NICE:+"--nicelevel"} ${NICE:+"$NICE"} \
        ${USER:+"--chuid"} ${USER:+"$USER"} \
        ${PIDFILE:+"--pidfile"} ${PIDFILE:+"$PIDFILE"} \
        --exec "$DAEMON" -- $OPTIONS
      STATUS=$?
      [ $STATUS -eq 0 ] && echo "." || echo " (failed)."
      ;;
    REDHAT)
      if [ "$PIDFILE" == "/var/run/$DAEMON_NAME.pid" -a -r "$PIDFILE" ] \
          || ! status "$DAEMON" >/dev/null; then
        daemon ${NICE:+"$NICE"} ${USER:+"--user"} ${USER:+"$USER"} \
          "$DAEMON" $OPTIONS
        STATUS=$?
      else
        STATUS=0
      fi
      echo
      [ $STATUS -eq 0 ] && touch "$RH_SUBSYS" 2>/dev/null
      ;;
    SUSE)
      startproc ${NICE:+"-n"} ${NICE:+"$NICE"} ${USER:+"-u"} ${USER:+"$USER"} \
        ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} "$DAEMON" $OPTIONS
      rc_status -v
      ;;
    LSB)
      if [ -n "$USER" ]; then
        su "$USER" -c "/sbin/start_daemon ${NICE:+\"-n\"} ${NICE:+\"$NICE\"} \
          ${PIDFILE:+\"-p\"} ${PIDFILE:+\"$PIDFILE\"} \"$DAEMON\" $OPTIONS" \
          2>/dev/null
      else
        start_daemon ${NICE:+"-n"} ${NICE:+"$NICE"} \
          ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} "$DAEMON" $OPTIONS
      fi
      STATUS=$?
      [ $STATUS -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    *)
      pids=`query_pids "$DAEMON" "$PIDFILE"`
      rc=$?
      if [ $rc -eq 0 -a -n "$pids" ]; then
        STATUS=0
      else
        [ -n "$NICE" ] && nice="nice -n $NICE"
        if [ -n "$USER" ]; then
          su "$USER" -c "$nice \"$DAEMON\" $OPTIONS" 2>/dev/null
        else
          $nice "$DAEMON" $OPTIONS 2>/dev/null
        fi
        STATUS=$?
      fi
      [ $STATUS -eq 0 ] && echo "success" || echo "failed"
      ;;
  esac
}

###############################################################################

service_stop ()
{
# Stop the service.
# Required by LSB.
#
# According to LSB, running "stop" on a service already stopped or not running
#   should be considered successful.
##
  printf "Stopping $DESC: "
  case $SYSTEM in
    DEBIAN)
      printf "$DAEMON_NAME"
      start-stop-daemon --stop --quiet \
        ${PIDFILE:+"--pidfile"} ${PIDFILE:+"$PIDFILE"} --name "$DAEMON_NAME" \
        ${SIGTERM_TIMEOUT:+"--retry"} ${SIGTERM_TIMEOUT:+"$SIGTERM_TIMEOUT"}
      STATUS=$?
      [ $STATUS -eq 0 ] && echo "." || echo " (failed)."
      ;;
    REDHAT)
      killproc "$DAEMON"
      STATUS=$?
      echo
      [ $STATUS -eq 0 ] && rm -f "$RH_SUBSYS" 2>/dev/null
      ;;
    SUSE)
      killproc ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} \
        ${SIGTERM_TIMEOUT:+"-t"} ${SIGTERM_TIMEOUT:+"$SIGTERM_TIMEOUT"} \
        "$DAEMON"
      rc_status -v
      ;;
    LSB)
      killproc ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} "$DAEMON"
      STATUS=$?
      [ $STATUS -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    *)
      signal_process "$DAEMON"
      rc=$?
      [ $rc -eq 0 -o $rc -eq 2 ] && STATUS=0 || STATUS=1
      [ $STATUS -eq 0 ] && echo "success" || echo "failed"
      ;;
  esac
}

###############################################################################

service_restart ()
{
# Stop and restart the service if it is already running;
#   otherwise, start the service.
# Required by LSB.
#
# According to LSB, running "restart" on a service already stopped or not
#   running should be considered successful.
##
  $0 status >/dev/null && $0 stop
  $0 start

  case $SYSTEM in
    SUSE)
      rc_status
      ;;
    DEBIAN|REDHAT|LSB|*)
      STATUS=$?
      ;;
  esac
}

###############################################################################

service_try_restart ()
{
# Restart the service if it is already running.
# Optional for LSB.  Also known as "condrestart" by RedHat.
#
# According to LSB, running "try-restart" on a service already stopped or not
#   running should be considered successful.
##
  case $SYSTEM in
    REDHAT)
      [ -f "$RH_SUBSYS" ] && $0 restart || :
      STATUS=$?
      ;;
    SUSE)
      $0 status >/dev/null && $0 restart || rc_reset
      rc_status
      ;;
    DEBIAN|LSB|*)
      $0 status >/dev/null && $0 restart || :
      STATUS=$?
      ;;
  esac
}

###############################################################################

service_reload ()
{
# Reload the configuration without stopping and restarting the service.
# Optional for LSB.
##
  [ -z "$RELOAD" ] && STATUS=3          # unimplemented feature

  printf "Reloading $DESC: "
  case $SYSTEM in
    DEBIAN)
      printf "$DAEMON_NAME"
      if [ -n "$RELOAD" ]; then
        start-stop-daemon --stop --quiet --signal HUP \
          ${PIDFILE:+"--pidfile"} ${PIDFILE:+"$PIDFILE"} --name "$DAEMON_NAME"
        STATUS=$?
      fi
      [ $STATUS -eq 0 ] && echo "." || echo " (failed)."
      ;;
    REDHAT)
      if [ -n "$RELOAD" ]; then
        killproc "$DAEMON" -HUP
        STATUS=$?
      else
        echo_failure
      fi
      echo
      ;;
    SUSE)
      if [ -n "$RELOAD" ]; then
        killproc -HUP ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} "$DAEMON"
      else
        rc_failed $STATUS
      fi
      rc_status -v
      ;;
    LSB)
      if [ -n "$RELOAD" ]; then
        killproc ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} "$DAEMON" -HUP
        STATUS=$?
      fi
      [ $STATUS -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    *)
      if [ -n "$RELOAD" ]; then
        signal_process "$DAEMON" "HUP"
        STATUS=$?
      fi
      [ $STATUS -eq 0 ] && echo "success" || echo "failed"
      ;;
  esac
}

###############################################################################

service_force_reload ()
{
# Reload the configuration if the service supports this;
#   otherwise, restart the service if it is already running.
# Required by LSB.
# 
# According to LSB, running "force-reload" on a service already stopped or not
#   running should be considered successful.
##
  if [ -n "$RELOAD" ]; then
    $0 reload
  else
    $0 try-restart
  fi

  case $SYSTEM in
    SUSE)
      rc_status
      ;;
    DEBIAN|REDHAT|LSB|*)
      STATUS=$?
      ;;
  esac
}

###############################################################################

service_status ()
{
# Print the current status of the service.
# Required by LSB.
##
  case $SYSTEM in
    REDHAT)
      status "$DAEMON"
      STATUS=$?
      ;;
    SUSE)
      printf "Checking for $DESC: "
      checkproc ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} "$DAEMON"
      rc_status -v
      ;;
    LSB)
      pids=`pidofproc ${PIDFILE:+"-p"} ${PIDFILE:+"$PIDFILE"} \
        "$DAEMON" 2>/dev/null`
      STATUS=$?
      if [ $STATUS -eq 0 -a -n "$pids" ]; then
        echo "$DAEMON_NAME (pid $pids) is running"
      else
        echo "$DAEMON_NAME is stopped"
      fi
      ;;
    DEBIAN|*)
      pids=`query_pids "$DAEMON" "$PIDFILE"`
      rc=$?
      if [ $rc -eq 0 -a -n "$pids" ]; then
        echo "$DAEMON_NAME (pid $pids) is running"
        STATUS=0
      elif [ $rc -ne 0 ]; then
        echo "$DAEMON_NAME is stopped"
        STATUS=3                        # program is not running
      else
        echo "$DAEMON_NAME status is unknown"
        STATUS=4                        # program status unknown
      fi
      ;;
  esac
}

###############################################################################

query_pids ()
{
# Writes the matching PIDs to stdout.
# Returns 0 on success (ie, pids found).
##
  PROCNAME="$1"
  PIDFILE="$2"

  if which pgrep >/dev/null 2>&1; then
    pids=`pgrep -d ' ' -x "\`basename \"$PROCNAME\"\`" 2>/dev/null`
    rc=$?
  elif which pidof >/dev/null 2>&1; then
    pids=`pidof -o $$ -x "$PROCNAME" 2>/dev/null`
    rc=$?
  else
    pids=`(ps awx -o pid= -o args= || ps -e -f -o pid= -o args=) 2>/dev/null \
      | egrep "( |/)$PROCNAME( |$)" | grep -v egrep \
      | awk '{print $1}' | sort -n | tr '\012' ' '`
    [ -n "$pids" ] && rc=0 || rc=1
  fi

  unset pids_running
  if [ -n "$pids" -a -r "$PIDFILE" ]; then
    read pid_line < "$PIDFILE"
    for pid in $pid_line; do
      expr "$pid" : '[0-9]*$' >/dev/null 2>&1 \
        && expr " $pids " : ".* $pid .*" >/dev/null 2>&1 \
        && pids_running="$pids_running $pid"
    done
    [ -n "$pids_running" ] && pids=$pids_running
  fi

  echo $pids
  return $rc
}

signal_process ()
{
# Returns 0 on success, 1 if kill failed, 2 if PROCNAME is not running.
##
  PROCNAME="$1"
  SIGNUM="$2"

  pids=`query_pids "$DAEMON" "$PIDFILE"`
  [ $? -ne 0 -o -z "$pids" ] && return 2

  kill ${SIGNUM:+"-$SIGNUM"} $pids 2>/dev/null
  [ $? -ne 0 ] && return 1
  [ -n "$SIGNUM" ] && return 0

  pids=`query_pids "$DAEMON" "$PIDFILE"`
  [ $? -ne 0 -o -z "$pids" ] && return 0
  [ -z "$SIGTERM_TIMEOUT" ] && return 1

  sleep "$SIGTERM_TIMEOUT"
  kill -KILL $pids 2>/dev/null
  [ $? -ne 0 ] && return 1 || return 0
}

###############################################################################

service_init "$@"

case "$1" in
  start)
    service_start
    ;;
  stop)
    service_stop
    ;;
  restart)
    service_restart
    ;;
  try-restart|condrestart)
    service_try_restart
    ;;
  reload)
    service_reload
    ;;
  force-reload)
    service_force_reload
    ;;
  status)
    service_status
    ;;
  *)
    COMMANDS="start|stop|restart|try-restart|reload|force-reload|status"
    echo "Usage: `basename \"$0\"` ($COMMANDS)" >&2
    exit 2                              # invalid or excess argument(s)
    ;;
esac

service_fini
