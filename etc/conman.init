#!/bin/sh
###############################################################################
# $Id$
###############################################################################
# chkconfig:      345 95 5
###############################################################################
### BEGIN INIT INFO
# Provides:       conman
# Required-Start: $named $network $time
# Required-Stop:  $named $network $time
# Should-Start:   $local_fs $syslog
# Should-Stop:    $local_fs $syslog
# Default-Start:  3 4 5
# Default-Stop:   0 1 2 6
# Description:    The ConMan daemon is used for serial console management.
### END INIT INFO
###############################################################################

SERVICE="ConMan"
DAEMON="/usr/sbin/conmand"
CONFIG="/etc/conman.conf"
OPTIONS="-c $CONFIG"

PATH=/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin

[ -x "$DAEMON" ] || exit 5              # error: program is not installed
[ -f "$CONFIG" ] || exit 6              # error: program is not configured

###############################################################################

service_init ()
{
# Determine the system type and initialize the environment.
#
# Note that the shell positional parameters must be preserved when calling
#   this function in order for SuSE to initialize its environment properly.
##
  local RH_SUBSYS_BASENAME

  rc=0
  if test -f /etc/init.d/functions; then
    SYSTEM="REDHAT"
    source /etc/init.d/functions
    RH_SUBSYS_BASENAME="`echo $0 | perl -pe 's,(.*/)?([SK][0-9]{2})?(.*),$3,'`"
    RH_SUBSYS="/var/lock/subsys/$RH_SUBSYS_BASENAME"
    INITLOG_ARGS=""                     # disable RH suppression of stderr msgs
  elif test -f /etc/rc.status; then
    SYSTEM="SUSE"
    source /etc/rc.status
    rc_reset
  elif test -f /lib/lsb/init-functions; then
    SYSTEM="LSB"
    source /lib/lsb/init-functions
  else
    SYSTEM="UNKNOWN"
  fi
}

###############################################################################

service_fini ()
{
# Return the exit status.
##
  case "$SYSTEM" in
    SUSE)
      rc_exit
      ;;
    LSB|REDHAT|*)
      exit $rc
      ;;
  esac
}

###############################################################################

service_start ()
{
# Start the service.
# Required by LSB.
#
# Running "start" on a service already running should be considered successful.
##
  echo -n "Starting $SERVICE: "
  case "$SYSTEM" in
    LSB)
      start_daemon "$DAEMON" $OPTIONS
      rc=$?
      [ $rc -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    REDHAT)
      daemon "$DAEMON" $OPTIONS
      rc=$?
      echo
      [ $rc -eq 0 ] && touch "$RH_SUBSYS" 2>/dev/null
      ;;
    SUSE)
      startproc "$DAEMON" $OPTIONS
      rc_status -v
      ;;
    *)
      "$DAEMON" $OPTIONS 2>/dev/null
      rc=$?
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

service_stop ()
{
# Stop the service.
# Required by LSB.
#
# Running "stop" on a service already stopped or not running should be
#   considered successful.
##
  echo -n "Stopping $SERVICE: "
  case "$SYSTEM" in
    LSB)
      killproc "$DAEMON"
      rc=$?
      [ $rc -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    REDHAT)
      killproc "$DAEMON"
      rc=$?
      echo
      [ $rc -eq 0 ] && rm -f "$RH_SUBSYS" 2>/dev/null
      ;;
    SUSE)
      killproc "$DAEMON"
      rc_status -v
      ;;
    *)
      "$DAEMON" $OPTIONS -k 2>/dev/null
      rc=$?
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

service_restart ()
{
# Stop and restart the service if it is already running;
#   otherwise, start the service.
# Required by LSB.
#
# Running "restart" on a service already stopped or not running should be
#   considered successful.
##
  $0 status >/dev/null && $0 stop
  $0 start

  case "$SYSTEM" in
    SUSE)
      rc_status
      ;;
    LSB|REDHAT|*)
      rc=$?
      ;;
  esac
}

###############################################################################

service_try_restart ()
{
# Restart the service if it is already running.
# Optional for LSB.  Also known as "condrestart" by RedHat.
#
# Running "try-restart" on a service already stopped or not running should be
#   considered successful.
##
  case "$SYSTEM" in
    REDHAT)
      [ -f "$RH_SUBSYS" ] && $0 restart || :
      rc=$?
      ;;
    SUSE)
      $0 status >/dev/null && $0 restart || rc_reset
      rc_status
      ;;
    LSB|*)
      $0 status >/dev/null && $0 restart || :
      rc=$?
      ;;
  esac
}

###############################################################################

service_reload ()
{
# Reload the configuration without stopping and restarting the service.
# Optional for LSB.
##
  rc=3                                  # error: unimplemented feature
  echo -n "Reloading $SERVICE: "
  case "$SYSTEM" in
    LSB)
#     killproc "$DAEMON" -HUP
#     rc=$?
      [ $rc -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    REDHAT)
#     killproc "$DAEMON" -HUP
#     rc=$?
      echo_failure
      echo
      ;;
    SUSE)
#     killproc -HUP "$DAEMON"
      rc_failed $rc
      rc_status -v
      ;;
    *)
#     "$DAEMON" $OPTIONS -r 2>/dev/null
#     rc=$?
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

service_force_reload ()
{
# Reload the configuration if the service supports this;
#   otherwise, restart the service if it is already running.
# Required by LSB.
# 
# Running "force-reload" on a service already stopped or not running should be
#   considered successful.
##
  $0 try-restart

  case "$SYSTEM" in
    SUSE)
      rc_status
      ;;
    LSB|REDHAT|*)
      rc=$?
      ;;
  esac
}

###############################################################################

service_status ()
{
# Print the current status of the service.
# Required by LSB.
##
  case "$SYSTEM" in
    LSB)
      pids=`pidofproc "$DAEMON" 2>/dev/null`
      rc=$?
      if [ $rc -eq 0 ]; then
        echo "`basename $DAEMON` (pid $pids) is running..."
      else
        echo "`basename $DAEMON` is stopped"
      fi
      ;;
    REDHAT)
      status "$DAEMON"
      rc=$?
      ;;
    SUSE)
      echo -n "Checking for $SERVICE: "
      checkproc "$DAEMON"
      rc_status -v
      ;;
    *)
      pids=`"$DAEMON" $OPTIONS -q 2>/dev/null`
      rc=$?
      if [ $rc -eq 0 -a -n "$pids" ]; then
        echo "`basename $DAEMON` (pid $pids) is running..."
      else
        echo "`basename $DAEMON` is stopped"
        rc=3
      fi
      ;;
  esac
}

###############################################################################

service_init "$@"

case "$1" in
  start)
    service_start
    ;;
  stop)
    service_stop
    ;;
  restart)
    service_restart
    ;;
  try-restart|condrestart)
    service_try_restart
    ;;
  reload)
    service_reload
    ;;
  force-reload)
    service_force_reload
    ;;
  status)
    service_status
    ;;
  *)
    COMMANDS="start|stop|restart|try-restart|reload|force-reload|status"
    echo "Usage: `basename $0` ($COMMANDS)"
    exit 2                              # error: invalid or excess argument(s)
    ;;
esac

service_fini
