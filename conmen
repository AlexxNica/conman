#!/usr/bin/env perl

##
#  $Id: conmen,v 1.10 2001/12/30 20:08:54 dun Exp $
#    by Chris Dunlap <cdunlap@llnl.gov>
##
#  This is a wrapper to aid in ConMan broadcast sessions.
#  It spawns an xterm for each of the selected consoles
#    and uses the current tty as the broadcast window.
#  All of the spawned xterm clients are terminated when the
#    broadcast window session is closed.
##

use Getopt::Std;


$SIG{TERM} = exit_handler;

$ENV{PATH} = "/usr/bin:/usr/local/bin:/usr/bin/X11:/usr/X11R6/bin";

$ENV{DISPLAY}
    or die("ERROR: DISPLAY is not set.\n");
!system("which conman 1>/dev/null 2>&1")
    or die("ERROR: conman not found in PATH.\n");
!system("which xterm 1>/dev/null 2>&1")
    or die("ERROR: xterm not found in PATH.\n");

$help = `conman -h`;
($def_dst) = ($help =~ /-d .* \[([^\]]*)\]/);
($def_esc) = ($help =~ /-e .* \[([^\]]*)\]/);

print_usage() if (!@ARGV || !getopts('d:e:fg:hjmrV') || $opt_h);

($opt_f + $opt_j + $opt_m <= 1)
    or die("ERROR: Only one mode [fjm] can be specified.\n");
exec("conman -V") if ($opt_V);

$conman = "conman";
$conman .= " -d \'$opt_d\'" if ($opt_d);
$conman .= " -e \'$opt_e\'" if ($opt_e);
$conman .= " -r" if ($opt_r);

if ($opt_f) {
    $mode = "-f";
} elsif ($opt_j) {
    $mode = "-j";
} elsif ($opt_m) {
    $mode = "-m";
} else {
    $mode = "-m";
}

foreach (@ARGV) { $_ = "'$_'"; }
$patterns = join(" ", @ARGV);
chomp(@consoles = `$conman -q $patterns`);

exit(1) if (@consoles == 0);
exec("$conman $mode $consoles[0]") if (@consoles == 1);

$xterm = "xterm";
$xterm .= " -geometry \'$opt_g\'" if ($opt_g);
foreach (@consoles) {
    $name = "\'ConMan: $_\'";
    system("$xterm -T $name -n $name -e $conman $mode $_ &\n");
    select(undef, undef, undef, 0.2);
}
select(undef, undef, undef, 1.0);
system("$conman -bjQ $patterns");
kill(TERM, getpid);

exit(0);


sub print_usage
{
    ($prog) = ($0 =~ m|(?:.*/)?([^/]*)|);
    print("Usage: $prog [OPTIONS] <console(s)>\n");
    print("\n");
    print("  -d HOST   Specify server destination. [$def_dst]\n");
    print("  -e CHAR   Specify escape character. [$def_esc]\n");
    print("  -f        Force connections (console-stealing).\n");
    print("  -g SIZE   Specify xterm's geometry (eg, 80x24).\n");
    print("  -h        Display this help.\n");
    print("  -j        Join connections (console-sharing).\n");
    print("  -m        Monitor connections (read-only).\n");
    print("  -r        Match console names via regular expressions.\n");
    print("  -V        Display version information.\n");
    print("\n");
    exit(0);
}


sub exit_handler
{
    exit(0);
}
