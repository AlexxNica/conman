#!/usr/bin/expect -f
###############################################################################
# $Id$
###############################################################################
# Copyright (C) 2001-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory.
# Written by Chris Dunlap <cdunlap@llnl.gov>.
# UCRL-CODE-2002-009.
#
# This file is part of ConMan: The Console Manager.
# For details, see <http://home.gna.org/conman/>.
###############################################################################
# This script connects to a console using the SSH protocol.
#
# This script can be specified in "conman.conf" in the following manner:
#
#   CONSOLE name="zot" dev="/path/to/ssh.exp HOST PORT USER PSWD"
#
# HOST is the hostname of the remote server.
# PORT is the port number (typically 22).
# USER is the username being authenticated.
# PSWD is the corresponding password.
#
# Since this command-line will persist in the process listing for the duration
# of the connection, passing the USER & PSWD in this manner is not recommended.
###############################################################################

##
# Set "exp_internal" to 1 to print diagnostics describing internal operations.
#   This is helpful in diagnosing pattern-match failures.
##
  exp_internal 0

##
# Set "log_user" to 1 to show the underlying dialogue that takes place during
#   the initial authentication step.
##
  log_user 0

##
# The "timeout" specifies the number of seconds before the authentication step
#   times-out and terminates the connection.
##
  set timeout 10

##
# Command-line argument defaults should be specified here.  In this manner,
#   you can avoid exposing the username and password on the command line.
##
# set port "22"
# set user "foo"
# set pswd "bar"
#
  set host [ lindex $argv 0 ]
  set port [ lindex $argv 1 ]
  set user [ lindex $argv 2 ]
  set pswd [ lindex $argv 3 ]

##

set authenticated 0

if [ catch "spawn ssh -l $user -p $port $host" reason ] {
  send_user "Error: failed to spawn ssh process: $reason.\r\n"
  exit 1
}
expect {
  -gl "Permission denied" {
    send_user "Error: Permission denied.\r\n"
    exit 1
  }
  eof {
    send_user "Error: Connection closed by remote host.\r\n"
    exit 1
  }
  timeout {
    if {$authenticated == 0} {
      send_user "Error: Timed-out.\r\n"
      exit 1
    }
  }
  -re "Enter passphrase for key .*: \$" {
    if {$authenticated == 0} {
      send "\r"
    }
    exp_continue -continue_timer
  }
  -re "^$user@.* password: \$" {
    if {$authenticated == 0} {
      send "$pswd\r"
      incr authenticated
      exp_continue -continue_timer
    } else {
      send_user "Error: Permission denied.\r\n"
      exit 1
    }
  }
  -re "(:|#|%|\\\$) \$" {
    if {$authenticated == 0} {
      exp_continue -continue_timer
    }
  }
  -re "\[^\r]*\r\n" {
    exp_continue -continue_timer
  }
}
send_user "Connection established via external ssh process.\r\n"
interact
