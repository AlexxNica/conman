#!/usr/bin/expect -f
###############################################################################
# $Id$
###############################################################################
# Copyright (C) 2001-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory.
# Written by Chris Dunlap <cdunlap@llnl.gov>.
# UCRL-CODE-2002-009.
#
# This file is part of ConMan: The Console Manager.
# For details, see <http://home.gna.org/conman/>.
###############################################################################
# This script connects to a console on a Cyclades terminal server using the
# telnet protocol (protocol socket_server or socket_server_ssh).  It supports
# consoles using no authentication (authtype none) and local authentication
# (authtype local).
#
# This script can be specified in "conman.conf" in the following manner:
#
#   CONSOLE name="zot" dev="/path/to/cyclades-telnet.exp HOST PORT [USER PSWD]"
#
# HOST is the hostname of the terminal server.
# PORT is the port number associated with the console.
# USER is the username being authenticated.
# PSWD is the corresponding password.
#
# Both USER and PSWD must be specified if the console requires authentication.
#
# Since this command-line will persist in the process listing for the duration
# of the connection, passing PSWD in this manner is not recommended.
###############################################################################

##
# Set "exp_internal" to 1 to print diagnostics describing internal operations.
#   This is helpful in diagnosing pattern-match failures.
##
  exp_internal 0

##
# Set "log_user" to 1 to show the underlying dialogue that takes place during
#   the initial authentication step.
##
  log_user 0

##
# The "timeout" specifies the number of seconds before the authentication step
#   times-out and terminates the connection.
##
  set timeout 10

##
# Command-line argument defaults should be specified here.  In this manner,
#   you can avoid exposing sensitive information on the command line.
##
# set user "foo"
# set pswd "bar"

##

set env(PATH) "/usr/bin:/bin"
set authenticated 0

if { ! $argc } {
  set prog [ lindex [ split $argv0 "/" ] end ]
  send_user "Usage: $prog <host> <port> [<user> <pswd>]\r\n"
  exit 1
}
if { $argc > 0 } {
  set host [ lindex $argv 0 ]
}
if { $argc > 1 } {
  set port [ lindex $argv 1 ]
}
if { $argc > 2 } {
  set user [ lindex $argv 2 ]
}
if { $argc > 3 } {
  set pswd [ lindex $argv 3 ]
}
if { ! [ info exists host ] } {
  send_user "Error: Unspecified hostname.\r\n"
  exit 1
} elseif { ! [ info exists port ] } {
  send_user "Error: Unspecified port number.\r\n"
  exit 1
} elseif { !([ info exists user ] && [ info exists pswd ]) } {
  set authenticated 1
}
if [ catch "spawn telnet $host $port" spawn_result ] {
  send_user "Error: $spawn_result.\r\n"
  exit 1
}
expect {
  -gl "Authentication failure" {
    send_user "Error: Permission denied.\r\n"
    exit 1
  }
  -gl "Connection refused" {
    send_user "Error: Connection refused.\r\n"
    exit 1
  }
  -re "(ttyS\[0-9]*) is being used by \\((.*)\\)" {
    send_user "Error: Console session for $expect_out(1,string) in use by $expect_out(2,string).\r\n"
    exit 1
  }
  -gl "is being used by" {
    send_user "Error: Console session already in use.\r\n"
    exit 1
  }
  -gl "closed by remote host" {
    send_user "Error: Connection closed by remote host.\r\n"
    exit 1
  }
  -re "^telnet: (\[^\r\n]*)\[\r\n]*\$" {
    send_user "Error: $expect_out(1,string).\r\n"
    exit 1
  }
  eof {
    send_user "Error: Connection closed by remote host.\r\n"
    exit 1
  }
  timeout {
    if { $authenticated == 0 } {
      send_user "Error: Timed-out waiting to authenticate.\r\n"
      exit 1
    }
  }
  -nocase -gl "login: \$" {
    if { $authenticated == 0 } {
      send "$user\r"
      exp_continue -continue_timer
    } else {
      send_user "Error: Permission denied.\r\n"
      exit 1
    }
  }
  -nocase -gl "password: \$" {
    if { $authenticated == 0 } {
      send "$pswd\r"
      incr authenticated
      exp_continue -continue_timer
    } else {
      send_user "Error: Permission denied.\r\n"
      exit 1
    }
  }
  -re "\[^\r]*\r\n" {
    exp_continue -continue_timer
  }
}
send_user "Connection established via external telnet process (pid $spawn_result).\r\n"
interact
