#!/usr/bin/expect -f
###############################################################################
# $Id$
###############################################################################
# Copyright (C) 2001-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory.
# Written by Chris Dunlap <cdunlap@llnl.gov>.
# UCRL-CODE-2002-009.
#
# This file is part of ConMan: The Console Manager.
# For details, see <http://home.gna.org/conman/>.
###############################################################################
# This script performs the initial authentication step to access a console on
# a given blade in an IBM BladeCenter using the telnet protocol.
#
# This script can be specified in "conman.conf" in the following manner:
#
#   CONSOLE name="zot" dev="/path/to/ibm-bc.exp HOST BLADE USER PSWD"
#
# HOST  is the hostname of the blade server.
# BLADE is the blade number associated with the console.
# USER  is the username being authenticated.
# PSWD  is the corresponding password.
#
# Since this command-line will persist in the process listing for the duration
# of the connection, passing sensitive information in this manner is not
# recommended.  Instead, consider using either a command-line argument default
# or the password database (see below).
###############################################################################

##
# Set "exp_internal" to 1 to print diagnostics describing internal operations.
#   This is helpful in diagnosing pattern-match failures.
##
  exp_internal 0

##
# Set "log_user" to 1 to show the underlying dialogue that takes place during
#   the initial authentication step.
##
  log_user 0

##
# The "timeout" specifies the number of seconds before the authentication step
#   times-out and terminates the connection.
##
  set timeout 10

##
# If "session_override" is set, an existing connection to the given blade
#   will be terminated and a new connection will be established; otherwise,
#   the connection will fail with "console session already in use".
##
  set session_override 0

##
# If "idle_timeout" is set greater than 0, a "space-backspace" sequence
#   will be sent every ${idle_timeout} seconds when no input activity is
#   detected in order to keep the connection active.
##
  set idle_timeout 0

##
# The "password_db" specifies the location of the password database.
#   This avoids exposing sensitive information on the command-line without
#   needing to modify this script.
# Whitespace and lines beginning with '#' are ignored.  The file format is:
#   <host-regex> : <user> : <pswd>
##
  set password_db "/etc/conman.pswd"

##
# Command-line argument defaults can be specified here.  This avoids exposing
#   sensitive information on the command-line.
##
# set user "foo"
# set pswd "bar"

###############################################################################

set env(PATH) "/usr/bin:/bin"

proc get_password {host user index} {
  global password_db
  set db_pswd {}
  if {! [info exists password_db]} {
    return
  }
  if {[catch {open $password_db} input]} {
    return
  }
  while {[gets $input line] != -1} {
    if {[regexp {^[ \t]*#} $line]} {
      continue
    }
    set record [split $line ":"]
    set db_host [string trim [lindex $record 0]]
    if {[catch {regexp "^$db_host$" $host} got_host_match]} {
      continue
    }
    if {! $got_host_match && [string length $db_host]} {
      continue
    }
    set db_user [string trim [lindex $record 1]]
    if {[string compare $db_user $user]} {
      continue
    }
    set db_pswd [string trim [lindex $record $index]]
    break
  }
  close $input
  return $db_pswd
}

if {! $argc} {
  set prog [lindex [split $argv0 "/"] end]
  send_user "Usage: $prog <host> <blade> <user> <pswd>\r\n"
  exit 1
}
if {$argc > 0} {
  set host [lindex $argv 0]
}
if {$argc > 1} {
  set blade [lindex $argv 1]
}
if {$argc > 2} {
  set user [lindex $argv 2]
}
if {$argc > 3} {
  set pswd [lindex $argv 3]
}
set authenticated 0
if {! [info exists host]} {
  send_user "Error: Unspecified hostname.\r\n"
  exit 1
}
if {! [info exists blade]} {
  send_user "Error: Unspecified blade number.\r\n"
  exit 1
}
if {! [info exists user]} {
  send_user "Error: Unspecified username.\r\n"
  exit 1
}
if {! [info exists pswd]} {
  set pswd [get_password $host $user 2]
  if {! [string length $pswd]} {
    send_user "Error: Unspecified password.\r\n"
    exit 1
  }
}
if {! [info exists idle_timeout] || ($idle_timeout <= 0)} {
  set idle_timeout -1
}
set cmd "console -T blade\[$blade]"
if {[info exists session_override] && ($session_override > 0)} {
  append cmd " -o"
}
if {[catch "spawn telnet $host" spawn_result]} {
  send_user "Error: $spawn_result.\r\n"
  exit 1
}
expect {
  -gl "Invalid login" {
    send_user "Error: Permission denied.\r\n"
    exit 1
  }
  -gl "Command not recognized" {
    send_user "Error: Command not recognized.\r\n"
    exit 1
  }
  -gl "Invalid target path" {
    send_user "Error: Invalid blade name.\r\n"
    exit 1
  }
  -gl "The target bay is out of range" {
    send_user "Error: Invalid blade number.\r\n"
    exit 1
  }
  -gl "SOL session is already active" {
    send_user "Error: Console session already in use.\r\n"
    exit 1
  }
  eof {
    send_user "Error: Connection closed by remote host.\r\n"
    exit 1
  }
  timeout {
    if {$authenticated == 0} {
      send_user "Error: Timed-out.\r\n"
      exit 1
    }
  }
  -nocase -gl "username: \$" {
    if {$authenticated == 0} {
      send "$user\r"
      exp_continue -continue_timer
    }
  }
  -nocase -gl "password: \$" {
    if {$authenticated == 0} {
      send "$pswd\r"
      exp_continue -continue_timer
    }
  }
  -nocase -gl "system> \$" {
    if {$authenticated == 0} {
      send "$cmd\r"
      incr authenticated
      exp_continue -continue_timer
    } else {
      send_user "Error: Unexpected response.\r\n"
      exit 1
    }
  }
  -gl "\u001b\\\[2J" {
    ;
  }
  -re "\[^\r]*\r\n" {
    exp_continue -continue_timer
  }
}
send_user "Connection established via external telnet process (pid $spawn_result).\r\n"
##
# The "&B" character sequence will be replaced with a serial-break.
# The "space-backspace" sequence will be sent after ${idle_timeout} seconds
#   of inactivity in order to keep the connection active.
##
interact {
  "&B" {
    set timeout 1
    send "\035send brk\r\n"
    expect "telnet> send brk"
  }
  timeout $idle_timeout {
    send " \177"
  }
}
